# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "$CIRCLE_TAG" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > src/marion/version.json

version: 2
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: python:3.8-buster
    working_directory: ~/marion
    steps:
      - checkout
      # Make sure the changes don't add a "print" statement to the code base.
      # We should exclude the ".circleci" folder from the search as the very command that checks
      # the absence of "print" is including a "print(" itself.
      - run:
          name: enforce absence of print statements in code
          command: |
            ! git diff origin/master..HEAD -- . ':(exclude).circleci' | grep "print("
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user .[gitlint]
          working_directory: src/marion
      - run:
          name: lint commit messages added to master
          command: |
            ~/.local/bin/gitlint --commits origin/master..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: circleci/buildpack-deps:buster-scm
    working_directory: ~/marion
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:buster-slim
    working_directory: ~/marion
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # ---- Docker jobs ----
  # Build the Docker image ready for production
  build-docker:
    docker:
      - image: circleci/buildpack-deps:buster
    working_directory: ~/marion
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: docker build -t marion:${CIRCLE_SHA1} --target production .
      - run:
          name: Check built image availability
          command: docker images "marion:${CIRCLE_SHA1}*"

  # ---- Backend jobs ----
  # Build backend development environment
  build-back:
    docker:
      - image: circleci/python:3.8-buster
    working_directory: ~/marion
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-back-dependencies-{{ .Revision }}
      - run:
          name: Install development dependencies
          command: pip install --user .[dev]
          working_directory: src/marion
      - save_cache:
          paths:
            - ~/.local
          key: v1-back-dependencies-{{ .Revision }}

  lint-back:
    docker:
      - image: circleci/python:3.8-buster
    working_directory: ~/marion/src/marion
    steps:
      - checkout:
          path: ~/marion
      - restore_cache:
          keys:
            - v1-back-dependencies-{{ .Revision }}
      - run:
          name: Lint code with flake8
          command: ~/.local/bin/flake8 .
      - run:
          name: Lint code with isort
          command: ~/.local/bin/isort --check-only .
      - run:
          name: Lint code with black
          command: ~/.local/bin/black --check .
      - run:
          name: Lint code with bandit
          command: ~/.local/bin/bandit -c .banditrc -r .
      - run:
          name: Lint code with pylint
          command: |
            ~/.local/bin/pylint marion

  test-back:
    docker:
      - image: circleci/python:3.8-buster
        environment:
          DJANGO_SETTINGS_MODULE: marion.settings
          DJANGO_CONFIGURATION: Test
          DJANGO_SECRET_KEY: ThisIsAnExampleKeyForTestPurposeOnly
          PYTHONPATH: /home/circleci/marion/src/marion
          DB_HOST: localhost
          DB_NAME: marion
          DB_USER: fun
          DB_PASSWORD: pass
          DB_PORT: 5432
      # services
      - image: circleci/postgres:12-ram
        environment:
          POSTGRES_DB: test_marion
          POSTGRES_USER: fun
          POSTGRES_PASSWORD: pass
    working_directory: ~/marion/src/marion
    steps:
      - checkout:
          path: ~/marion
      - restore_cache:
          keys:
            - v1-back-dependencies-{{ .Revision }}
      # While running tests, we need to make the /data directory writable for
      # the circleci user
      - run:
          name: Create writable /data
          command: |
            sudo mkdir -p /data/media && \
            sudo chown -R circleci:circleci /data
      # Run back-end (Django) test suite
      #
      # Nota bene: to run the django test suite, we need to ensure that
      # PostgreSQL service is up and ready. To achieve this, we wrap the pytest
      # command execution with dockerize, a tiny tool installed in the CircleCI
      # image. In our case, dockerize will wait up to one minute that both the
      # database container opened expected tcp port (5432).
      - run:
          name: Run tests
          command: |
            dockerize \
              -wait tcp://localhost:5432 \
              -timeout 60s \
              ~/.local/bin/pytest

  # ---- Packaging jobs ----
  package-back:
    docker:
      - image: circleci/python:3.8-buster
    working_directory: ~/marion/src/marion
    steps:
      - checkout:
          path: ~/marion
      - run:
          name: Build python package
          command: python setup.py sdist bdist_wheel
      # Persist build packages to the workspace
      - persist_to_workspace:
          root: ~/marion
          paths:
            - src/marion/dist
      # Store packages as artifacts to download/test them
      - store_artifacts:
          path: ~/marion/src/marion/dist

  # Publishing to PyPI requires that:
  #   * you already registered to pypi.org
  #   * you have define both the TWINE_USERNAME & TWINE_PASSWORD secret
  #     environment variables in CircleCI UI (with your PyPI credentials)
  pypi:
    docker:
      - image: circleci/python:3.8-buster
    working_directory: ~/marion/src/marion
    steps:
      - checkout:
          path: ~/marion
      # Restore built python packages
      - attach_workspace:
          at: ~/marion
      - run:
          name: List built packages
          command: ls dist/*
      - run:
          name: Install base requirements (twine)
          command: pip install --user .[ci]
      - run:
          name: Upload built packages to PyPI
          command: ~/.local/bin/twine upload dist/*

workflows:
  version: 2

  marion:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/
      # Check CHANGELOG update
      - check-changelog:
          filters:
            branches:
              ignore: master
            tags:
              only: /(?!^v).*/
      - lint-changelog:
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build images
      - build-docker:
          filters:
            tags:
              only: /.*/

      # Backend jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build-back:
          filters:
            tags:
              only: /.*/
      - lint-back:
          requires:
            - build-back
          filters:
            tags:
              only: /.*/
      - test-back:
          requires:
            - build-back
          filters:
            tags:
              only: /.*/

      # Packaging: python
      #
      # Build the python package
      - package-back:
          requires:
            - build-back
            - lint-back
            - test-back
          filters:
            tags:
              only: /.*/

      # PyPI publication.
      #
      # Publish python package to PYPI only if all build, lint and test jobs
      # succeed and it has been tagged with a tag starting with the letter v
      - pypi:
          requires:
            - package-back
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
