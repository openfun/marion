{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Marion is a documents factory backend to generate PDF files using a REST API and HTML/CSS templates.</p>"},{"location":"#key_concepts","title":"Key concepts","text":"<p>Marion is a Django application that can be integrated to your Django project or deployed to production as a standalone service.</p> <p>To generate PDF files with styles, first, you will have to write your own document issuer and related HTML/CSS templates in a Django application package. Once your issuer has been installed and configured, you can create a document request using the backend API with your favorite HTTP client (we \u2764\ufe0f <code>http</code>, but <code>curl</code> is perfectly fine \ud83d\ude09):</p> <pre><code># Create a new document using the dummy issuer\n$ http POST http://localhost:8000/api/documents/requests/ \\\nissuer=\"marion.certificates.issuers.DummyDocument\" \\\ncontext_query='{\"fullname\": \"John Doe\"}'\n</code></pre> <p>As you may have noticed, you should provide two parameters for this request:</p> <ol> <li>the document <code>issuer</code> for this request (as a python module path), and,</li> <li>a <code>context_query</code> that will be used by the issuer to resolve the context    that will be injected in your HTML/CSS templates to generate a document;    think of a context as a Django template    context.</li> </ol> <p>If you get lucky, your document has been cooked. It is available for download in the configured <code>MEDIA_ROOT</code> of the Django project Marion has been integrated to. You will find the link to the PDF document in the newly created document request (see the <code>document_url</code> field):</p> <pre><code>{\n\"document_id\": \"60593260-2c0f-4c54-88e5-96ae0db06081\",\n\"document_url\": \"http://localhost:8000/media/60593260-2c0f-4c54-88e5-96ae0db06081.pdf\",\n\"context\": {\n\"fullname\": \"John Doe\",\n\"identifier\": \"60593260-2c0f-4c54-88e5-96ae0db06081\"\n},\n\"context_query\": {\n\"fullname\": \"John Doe\"\n},\n\"created_on\": \"2021-03-12T15:48:15.737311Z\",\n\"issuer\": \"marion.documents.issuers.DummyDocument\",\n\"updated_on\": \"2021-03-12T15:48:15.737336Z\",\n\"url\": \"http://localhost:8000/api/documents/requests/b90031a6-dcb4-49d6-ac6c-017030352f33/\"\n}\n</code></pre>"},{"location":"#key_takeways","title":"Key takeways","text":"<ul> <li>Issuer: this keyword designates a particular type of document   with its own templates and logic to fetch a context that will be used to   create it.</li> <li>Document request: a database entry tracking the context (query) used to   generate a document and its download link.</li> <li>Context query: parameters that will be used by an issuer to fetch a context   that will be used to compile a document template.</li> <li>Context: all variables that will be used to render document templates   (e.g. a Django context).</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Add Django 4.2 compatibility</li> </ul>"},{"location":"CHANGELOG/#040_-_2022-08-05","title":"0.4.0 - 2022-08-05","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Add Django 4.0 compatibility</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Use static storage class to open static files</li> </ul>"},{"location":"CHANGELOG/#032_-_2021-11-29","title":"0.3.2 - 2021-11-29","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Create a <code>IssuerLazyChoiceField</code> to be able to update issuer field choices   without creating migrations.</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Add a <code>persist</code> argument to <code>AbstractDocument.create</code> method</li> </ul>"},{"location":"CHANGELOG/#031_-_2021-09-02","title":"0.3.1 - 2021-09-02","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li><code>Weasyprint</code> 53.0+ is now needed</li> </ul>"},{"location":"CHANGELOG/#030_-_2021-06-08","title":"0.3.0 - 2021-06-08","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>the <code>DocumentRequest</code> model now has a <code>get_document_path</code> helper</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Avoid caching pydantic model instance in the <code>PydanticModelField</code> to avoid   multiple models collisions</li> </ul>"},{"location":"CHANGELOG/#020_-_2021-04-14","title":"0.2.0 - 2021-04-14","text":""},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li>Add Django 3.2 compatibility</li> <li>Distribute a complete documentation</li> </ul>"},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Add package description (README)</li> </ul>"},{"location":"CHANGELOG/#012_-_2021-04-06","title":"0.1.2 - 2021-04-06","text":""},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Include templates and static files in distributed package</li> </ul>"},{"location":"CHANGELOG/#011_-_2021-04-06","title":"0.1.1 - 2021-04-06","text":""},{"location":"CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>Package name in version metadata</li> </ul>"},{"location":"CHANGELOG/#010_-_2021-03-26","title":"0.1.0 - 2021-03-26","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li>Install security updates in project Docker images</li> <li>Add <code>DocumentRequest</code> model, serializer and API viewset</li> <li>Add <code>DummyDocument</code> example document issuer</li> <li>Implement document issuer pattern</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2020-present France Universit\u00e9 Num\u00e9rique</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"contribute/","title":"Contribute","text":""},{"location":"contribute/#getting_started","title":"Getting started","text":"<p>To start playing with Marion, you should build it using the <code>bootstrap</code> Make target:</p> <pre><code>$ make bootstrap\n</code></pre> <p>This will build a Docker image that will run Marion in a Django sandbox, start the <code>postgresql</code> docker compose service and run database migration.</p> <p>Once finished, you can start Django\u2019s development server using:</p> <pre><code>$ make run\n</code></pre> <p>The REST API development server should be up and running at: http://localhost:8000/api/documents/requests/</p> <p>You can follow the web server logs using:</p> <pre><code>$ make logs\n</code></pre>"},{"location":"contribute/#lint_your_code","title":"Lint your code","text":"<p>To run python linters, use the <code>lint</code> Make target:</p> <pre><code>$ make lint\n</code></pre> <p>Linters can be run separately using the <code>lint-{{ linter }}</code> Make rule, e.g:</p> <pre><code>$ make lint-pylint\n</code></pre> <p>You can list all linters using:</p> <pre><code>$ make help | grep lint- | sort\n</code></pre> <p>If you need to run <code>pylint</code> with custom arguments, we provide an helper for this:</p> <pre><code>$ bin/pylint\n</code></pre>"},{"location":"contribute/#run_tests","title":"Run tests","text":"<p>Running tests with <code>pytest</code> can be achieved using:</p> <pre><code>$ make test\n</code></pre> <p>But we also provide an helper to add custom arguments to <code>pytest</code> calls (e.g. calling a specific test pattern):</p> <pre><code>$ bin/pytest -x -k test_foo_issuer\n</code></pre>"},{"location":"contribute/#write_documentation","title":"Write documentation","text":"<p>Documentation sources lie in the <code>docs/</code> directory of the project. It is generated using MkDocs. We provide Make rules to use it:</p> <pre><code># Build the documentation\n$ make docs-build\n\n# Run the documentation development server\n$ make docs-serve\n</code></pre> <p>The documentation development server is then accessible on your browser at the  following address: http://localhost:8001.</p> <p>Note that the documentation is automatically built by the CI platform we use, so you don\u2019t need to manually deploy it.</p>"},{"location":"contribute/#misc","title":"Misc","text":"<p>You will find the complete list of useful commands using:</p> <pre><code>$ make help\n</code></pre>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#pre-requisite","title":"Pre-requisite","text":"<p>Marion depends on the Weasyprint project. As such it inherits from its core dependencies. Please make sure that you have installed them before installing Marion.</p> <p>As example, in a Debian-based distribution, you may need to install the following packages:</p> <pre><code>$ (sudo) apt-get install -y \\\n    libcairo2 \\\n    libffi-dev \\\n    libgdk-pixbuf2.0-0 \\\n    libpango-1.0-0 \\\n    libpangocairo-1.0-0 \\\n    shared-mime-info\n</code></pre>"},{"location":"install/#install_marion_python_package","title":"Install Marion python package","text":"<p>Marion is distributed as a python package. It can be installed from PyPI using the <code>pip</code> tool (or any other python package manager):</p> <pre><code># Create a new virtualenv (optional)\n$ python -m venv venv\n$ source venv/bin/activate\n\n# Install the package (in a virtualenv)\n(venv) $ pip install django-marion\n</code></pre> <p>From here, you have two options: either integrate the <code>marion</code> application in an existing Django project or create a new Django project to run Marion as a standalone service.</p>"},{"location":"install/#create_a_standalone_sandbox_for_marion","title":"Create a standalone sandbox for Marion","text":"<p>If you already have a running Django project and intend to integrate Marion in this project, you can safely skip this section and read the next one.</p> <p>If you are starting from scratch to test Marion or prefer having a standalone service running marion, let\u2019s create a new Django project that will be used as a sandbox:</p> <pre><code># Install Django\n(venv) $ pip install Django\n\n# Create a new project\n(venv) $ django-admin startproject myproject\n</code></pre> <p>You have created a new Django project called <code>myproject</code>. It should look like:</p> <pre><code>myproject\n\u251c\u2500\u2500 manage.py\n\u2514\u2500\u2500 myproject\n    \u251c\u2500\u2500 asgi.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 settings.py\n    \u251c\u2500\u2500 urls.py\n    \u2514\u2500\u2500 wsgi.py\n\n1 directory, 6 files\n</code></pre> <p>You can now proceed with Marion\u2019s integration in the next subsection.</p>"},{"location":"install/#integrate_marion_in_a_django_project","title":"Integrate Marion in a Django project","text":"<p>Marion\u2019s integration in your project follows a standard procedure for a Django application:</p> <p>1. add <code>rest_framework</code> and <code>marion</code> to your installed apps:</p> <pre><code># myproject/settings.py\n\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    # [...]\n    \"rest_framework\",\n    \"marion\",\n]\n</code></pre> <p>2. add <code>marion</code> urls to your <code>ROOT_URLCONF</code> module:</p> <pre><code># myproject/urls.py\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.urls import include, path\n\n\nurlpatterns = (\n    [\n        path(\"admin/\", admin.site.urls),\n        # [...]\n        path(\"api/documents/\", include(\"marion.urls\")),\n    ]\n    # Optionally serve static and media files when DEBUG=True\n    + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n)\n</code></pre> <p>3. run <code>marion</code>\u2018s database migrations:</p> <pre><code>(venv) $ python manage.py migrate\n</code></pre>"},{"location":"install/#create_your_first_document","title":"Create your first document","text":"<p>Now that Marion is configured and migrated, let\u2019s run Django\u2019s development server to generate a document:</p> <pre><code>(venv) $ python manage.py runserver\n</code></pre> <p>If you haven\u2019t installed <code>http</code> (come on, really?), you can safely test it in your virtual environment:</p> <pre><code>(venv) $ pip install httpie\n</code></pre> <p>Perform your first document request using <code>http</code>:</p> <pre><code>(venv) $ http POST http://localhost:8000/api/documents/requests/ \\\nissuer=\"marion.certificates.issuers.DummyDocument\" \\\ncontext_query='{\"fullname\": \"John Doe\"}'\n</code></pre> <p>If everything has been properly configured, you should have a <code>HTTP 200</code> response to this API request. And the json response should look like:</p> <pre><code>{\n\"document_id\": \"60593260-2c0f-4c54-88e5-96ae0db06081\",\n\"document_url\": \"http://localhost:8000/media/60593260-2c0f-4c54-88e5-96ae0db06081.pdf\",\n\"context\": {\n\"fullname\": \"John Doe\",\n\"identifier\": \"60593260-2c0f-4c54-88e5-96ae0db06081\"\n},\n\"context_query\": {\n\"fullname\": \"John Doe\"\n},\n\"created_on\": \"2021-03-12T15:48:15.737311Z\",\n\"issuer\": \"marion.documents.issuers.DummyDocument\",\n\"updated_on\": \"2021-03-12T15:48:15.737336Z\",\n\"url\": \"http://localhost:8000/api/documents/requests/b90031a6-dcb4-49d6-ac6c-017030352f33/\"\n}\n</code></pre> <p>As you may have already guessed, your document has been properly generated and it can be viewed/downloaded from the Django\u2019s media folder at the following URL: <code>http://localhost:8000/media/60593260-2c0f-4c54-88e5-96ae0db06081.pdf</code></p> <p>At this stage, we have validated that Marion is properly installed and configured. Even if the dummy document looks nice, you may ask: \u201cOk, now what? How can I create custom documents that suit my needs?\u201d</p> <p></p> <p>In the next section, answered this question will be.</p>"},{"location":"issuer/","title":"Create an issuer","text":"<p>Once Marion is installed, you will need to create one issuer per document type you need to generate. Your issuers should stand in a python module that bundles templates and the business logic required to build your documents. This module can be distributed as a python package or a core Django application in your Django project.</p>"},{"location":"issuer/#module_tree","title":"Module tree","text":"<p>An example <code>shop</code> module tree follows:</p> <pre><code>apps/shop\n\u251c\u2500\u2500 defaults.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 issuers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 invoice.py\n\u251c\u2500\u2500 static\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 shop\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 logo.svg\n\u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 shop\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 invoice.css\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 invoice.html\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 issuers\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 test_invoice.py\n</code></pre> <p>As you may have noticed if you are familiar with Django: the module tree looks like a standard Django app (but without models, views and urls). Except for the <code>static/{{ application_name }}</code> directory, the project tree is only a recommendation, feel free to organize things the way you like.</p> <p>In the proposed project tree:</p> <ul> <li><code>defaults.py</code> contains default values to configure your issuer,</li> <li><code>issuers</code> module contains issuers (one file per issuer),</li> <li><code>static/{{ application_name }}</code> is the place to store images that will be   embedded in your rendered documents,</li> <li><code>templates/{{ application_name }}</code> contains your HTML and CSS templates that   will be used to generate your documents, and,</li> <li><code>tests/issuers</code> directory will ship tests for your issuers (business logic).</li> </ul>"},{"location":"issuer/#business_logic","title":"Business logic","text":"<p>Now that your project tree is ready, you will need to write code for your <code>Invoice</code> issuer. Before writing code, we will have to explain a key concept in Marion\u2019s design: an issuer uses a context query to fetch a context that will be used to substitute variables in your templates. In other words, this context query is a collection of key-values that is required to build or fetch a collection of key-values that will serve as the context.</p> <p>An example issuer code follows (it will be commented in details later):</p> <pre><code># apps/shop/issuers/invoice.py\n\nimport json\n\nfrom pathlib import Path\nfrom uuid import UUID\n\nimport requests\n\nfrom pydantic import BaseModel\n\nfrom marion.issuers.base import AbstractDocument\n\n\nclass Customer(BaseModel):\n\"\"\"Customer pydantic model\"\"\"\n\n   name: str\n\n\nclass Invoice(BaseModel):\n\"\"\"Invoice pydantic model\"\"\"\n\n   invoice_id: UUID\n   customer: Customer\n   total: float\n\n\nclass ContextModel(BaseModel):\n\"\"\"Context pydantic model\"\"\"\n\n   invoice: Invoice\n\n\nclass ContextQueryModel(BaseModel):\n\"\"\"Context query pydantic model\"\"\"\n\n   order_id: UUID\n\n\nclass InvoiceDocument(AbstractDocument):\n\"\"\"Invoice issuer\"\"\"\n\n   keywords = [\"MyShop\", \"invoice\"]\n\n   context_model = ContextModel\n   context_query_model = ContextQueryModel\n\n   css_template_path = Path(\"shop/invoice.css\")\n   html_template_path = Path(\"shop/invoice.html\")\n\n   def fetch_context(self) -&gt; dict:\n\"\"\"Write your business logic to fetch the context here\"\"\"\n\n      response = requests.get(\n         f\"https://www.myshop.com/api/orders/{self.context_query.order_id}\"\n      )\n      order = json.loads(response.json())\n\n      return {\n         \"invoice\": {\n            \"invoice_id\": order.get(\"id\"),\n            \"customer\": {\n               \"name\": order.get(\"customer\").get(\"fullname\"),\n            },\n            \"total\": order.get(\"total\"),\n         }\n      }\n\n   def get_title(self):\n\"\"\"Generate a PDF title that depends on the context\"\"\"\n      return f\"Invoice ref. {self.context.invoice.invoice_id}\"\n</code></pre> <p>After reading this simplified piece of code, you may have noticed that:</p> <ol> <li>your issuer class should inherit from the    <code>marion.issuers.base.AbstractDocument</code> class,</li> <li>your issuer class should implement the <code>fetch_context</code> method,</li> <li>the <code>fetch_context</code> method should return a dictionnary of the context    that will be used to render your templates (more on this later),</li> <li>you should define Pydantic    models to validate data from your context and context query,</li> </ol> <p>Note that documents metadata such as the <code>title</code>, <code>keywords</code> or <code>authors</code> can be statically set as an issuer class attribute (e.g. <code>title</code>) or dynamically using the corresponding method (e.g. <code>get_title()</code> for the <code>title</code> attribute in our example). For reference, see the <code>marion.issuers.base.PDFFileMetadataMixin</code> mixin implementation.</p>"},{"location":"issuer/#document_templates","title":"Document templates","text":"<p>While writing our issuer class, we\u2019ve taken care of the business logic to collect all required information (context variables) that will be integrated to the issuer document template. The second step is to implement the logical structure (HTML) and the design (CSS) of our document.</p> <p>While writing your document template, you must keep in mind that you are designing a printed document, e.g. writing CSS rules for the <code>print</code> media.</p> <p>You should also note that both your HTML and CSS files are Django templates that are consequently context-aware and versatile.</p> <p>Simplified example template files for the <code>Invoice</code> issuer are presented below.</p> <pre><code>&lt;!-- apps/shop/templates/shop/invoice.html --&gt;\n\n{% load i18n %}\n{% load static %}\n\n&lt;html&gt;\n  {% if debug %}\n  &lt;head&gt;\n    &lt;style&gt;\n{{ css }}\n&lt;/style&gt;\n  &lt;/head&gt;\n  {% endif %}\n  &lt;body&gt;\n    &lt;div class=\"invoice\"&gt;\n      &lt;header&gt;\n        &lt;!--\n            Company matters\n        --&gt;\n        &lt;div class=\"logo\"&gt;\n          &lt;img\n            src=\"{{ debug | yesno:\",file://\" }}{% static \"shop/logo.svg\" %}\"\n            alt=\"{% trans \"company logo\" %}\"\n          /&gt;\n        &lt;/div&gt;\n      &lt;/header&gt;\n      &lt;article class=\"order\"&gt;\n        &lt;div class=\"invoice-id\"&gt;\n          {% trans \"Invoice reference:\" %} {{ invoice.invoice_id }}\n        &lt;/div&gt;\n        &lt;div class=\"customer\"&gt;\n          {{ invoice.customer.name }}\n        &lt;/div&gt;\n        &lt;div class=\"total-amount\"&gt;\n          {{ invoice.total }} &amp;euro;\n        &lt;/div&gt;\n      &lt;/article&gt;\n      &lt;footer&gt;\n        &lt;!--\n            Contact informations\n        --&gt;\n      &lt;/footer&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>If you are familiar with Django templates, <code>debug</code> blocks usage or conditions can be confusing at first sight. We will explain those in the next subsection.</p> <pre><code>/* apps/shop/templates/shop/invoice.css */\n\n/* load extra fonts */\n@import url(\"https://fonts.googleapis.com/css2?family=Open+Sans\");\n\nbody {\nfont-family: \"Open Sans\", sans-serif;\nfont-size: 11pt;\ncolor: #222;\n}\n\n@media print {\n/* ----------------------\n   * Reset margins for media\n   * ---------------------- */\n@page {\nsize: A4 portrait;\nmargin: 0;\npadding: 0;\n}\n\nbody {\npadding: 0;\nbackground: #ffbe0b;\n}\n\n* {\nmargin: 0;\npadding: 0;\n}\n\n/* ----------------------\n   * Add custom styles below\n   * ---------------------- */\n.invoice {\n/* [...] */\n}\n}\n</code></pre>"},{"location":"issuer/#using_the_document_template_debug_view","title":"Using the document template debug view","text":"<p>Integrating a document template can be time consuming if you need to render it as a PDF every time you want to check how it looks like. To ease your life, we\u2019ve cooked a template debug view that can be activated in your development environment by modifiying your root URLs configuration as follow:</p> <pre><code># myproject.myproject.urls\n\nfrom django.conf import settings\n\n# [...]\n\nif settings.DEBUG:\n    urlpatterns += [path(\"__debug__/\", include(\"marion.urls.debug\"))]\n</code></pre> <p>We advice you not to activate this in production, it should only be active for development.</p> <p>By using this view, you will be able to \u201csee\u201d your document in your browser as a normal web page at the following URL: http://localhost:8000/__debug__/templates/</p> <p>Two GET request parameters are required to point to your template:</p> <ol> <li><code>issuer</code>: the target issuer path</li> <li><code>context</code>: the issuer context (as resulting from the issuer\u2019s    <code>fetch_context</code> method)</li> </ol> <p>A complete debug template URL example may look like:</p> <pre><code>http://localhost:8000/__debug__/templates/?issuer=apps.shop.issuers.invoice.InvoiceDocument&amp;context=%7B%22invoice%22%3A+%7B%22invoice-id%22%3A+%22d972fef9%22%7D\n</code></pre> <p>Note that the JSON-serialized <code>context</code> should be URL encoded. This can be achieved using the following python snippet:</p> <pre><code>import json\nimport urllib.parse\n\nwith open(\"context.json\") as example:\n    print(\n        urllib.parse.quote_plus(\n            json.dumps(\n                json.load(example)\n            )\n        )\n    )\n</code></pre> <p>As mentionned earlier, you should keep in mind that the media that will be used to render your document is a printer, so you should enable print media emulation in the developer tools of your web browser to have a better idea of what it will look like once rendered as a PDF.</p> <p>In expected conditions (outside from a Django view context), Marion generates a PDF file using separated HTML and CSS content. Linked files (e.g. embedded images) are expected to be referenced using the <code>file://</code> protocol (a custom url fetcher will integrate those files in the final document). But, when using this debug view, we need to inject CSS styles in the template and serve static files by Django to display them in the browser. This is why we add a <code>debug</code> variable to the Django context. This variable should be used to add CSS content in the debug view:</p> <pre><code>&lt;html&gt;\n  {% if debug %}\n  &lt;head&gt;\n    {{ css }}\n  &lt;/head&gt;\n  {% endif %}\n\n  &lt;!-- [...] --&gt;\n&lt;/html&gt;\n</code></pre> <p>And display images:</p> <pre><code>&lt;img\n  src=\"{{ debug | yesno:\",file://\" }}{% static \"shop/logo.svg\" %}\"\n  alt=\"{% trans \"company logo\" %}\"\n/&gt;\n</code></pre>"},{"location":"issuer/#issuer_configuration","title":"Issuer configuration","text":"<p>Once written, we should declare distributed application issuers:</p> <pre><code># apps/shop/defaults.py\n\nfrom django.db.models import TextChoices\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass ShopDocumentIssuerChoices(TextChoices):\n\"\"\"List active document issuers.\"\"\"\n\n    INVOICE = \"apps.shop.issuers.invoice.InvoiceDocument\", _(\"Invoice\")\n</code></pre> <p>And activate them in our Django settings:</p> <pre><code># pyproject/myproject/settings.py\n\n# Add the shop app\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    # [...]\n    \"rest_framework\",\n    \"marion\",\n    \"apps.shop\",\n]\n\n# Activate shop issuers\nMARION_DOCUMENT_ISSUER_CHOICES_CLASS = \"apps.shop.defaults.ShopDocumentIssuerChoices\"\n</code></pre> <p>Only issuers listed in the <code>ShopDocumentIssuerChoices</code> can be used in the current Django project. If you need more issuers, you should declare them in the <code>ShopDocumentIssuerChoices</code> enum-like object or declare a new enum listing all allowed issuers for your project.</p> <p>Note that modifying this setting requires to create a new database migration as this will change choices of the <code>DocumentRequest.issuer</code> field.</p>"},{"location":"issuer/#document_rendering","title":"Document rendering","text":"<p>Once your issuer has been implemented and activated, you can generate the corresponding PDF file using either the issuer API, the <code>DocumentRequest</code> model or the REST API endpoint. In the first scenario, the generation of your document will not be tracked as a document request in your database.</p>"},{"location":"issuer/#using_the_issuer_api","title":"Using the issuer API","text":"<p>To generate a document, you will need to instantiate the corresponding issuer with an appropriate context query, and then call the <code>create()</code> method:</p> <pre><code>from apps.shop.issuers.invoice.InvoiceDocument\n\ninvoice = InvoiceDocument(\n   context_query={\"order_id\": \"7866454a-600e-434a-a546-04a286b208db\"}\n)\n\n# Generate the PDF file\ninvoice.create()\n</code></pre> <p>Your document should have been rendered in a PDF file created in the <code>MARION_DOCUMENTS_ROOT</code> setting path. For reference, see the <code>marion.issuers.base.AbstractDocument</code> class.</p>"},{"location":"issuer/#using_the_documentrequest_django_model","title":"Using the <code>DocumentRequest</code> Django model","text":"<p>If you want to track documents creation in your database, you should use Marion\u2019s <code>DocumentRequest</code> model in your views:</p> <pre><code># apps/shop/views.py\n\nfrom marion.models import DocumentRequest\n\n\ndef payment(request):\n\"\"\"Payment view\"\"\"\n\n    order_id = request.POST.get(\"order_id\")\n\n    invoice = DocumentRequest.objects.create(\n      issuer=\"apps.shop.issuers.invoice.InvoiceDocument\",\n      context_query={\"order_id\": order_id}\n   )\n\n   # [...]\n</code></pre> <p>Your document should have been rendered in a PDF file created in the <code>MARION_DOCUMENTS_ROOT</code> setting path. For reference, see the <code>marion.models.DocumentRequest</code> class and the <code>marion.issuers.base.AbstractDocument</code> class.</p>"},{"location":"issuer/#using_the_rest_api","title":"Using the REST API","text":"<p>If you have configured Marion\u2019s urls in your project, you can use the document request view set to get, list or create a new document:</p> <pre><code># Create a new document using the invoice issuer\n$ http POST http://localhost:8000/api/documents/requests/ \\\nissuer=\"apps.shop.issuers.invoice.InvoiceDocument\" \\\ncontext_query='{\"order_id\": \"7866454a-600e-434a-a546-04a286b208db\"}'\n</code></pre> <p>You should have a <code>HTTP 200 OK</code> response. Yatta!</p> <p></p> <p>Once created, check the document request ID (and the corresponding document) by listing created objects via:</p> <pre><code>$ http GET http://localhost:8000/api/documents/requests/\n</code></pre>"},{"location":"issuer/#issuer_testing","title":"Issuer testing","text":"<p>Don\u2019t forget to test your business logic implemented in the <code>fetch_context</code> method of your issuer. We use <code>pytest</code> along with hypothesis as it has builtin support for Pydantic models.</p>"},{"location":"settings/","title":"Settings","text":"<p>Marion\u2019s defaults can be overridden using the following Django settings:</p> <ul> <li><code>MARION_DOCUMENT_ISSUER_CHOICES_CLASS</code>: the list of avaiable active issuers   for your project (default: <code>marion.defaults.DocumentIssuerChoices</code>)</li> <li><code>MARION_DOCUMENTS_ROOT</code>: the root directory that will store generated   documents (default: <code>Path(settings.MEDIA_ROOT)</code>)</li> <li><code>MARION_DOCUMENTS_TEMPLATE_ROOT</code>: the default relative template path where to   find templates for your issuer (default: <code>Path(\"marion\")</code>)</li> </ul>"},{"location":"sources/issuer/","title":"Issuer","text":"<p>TODO: include base issuer source code here.</p>"},{"location":"sources/model/","title":"Model","text":"<p>TODO: include source code here.</p>"}]}